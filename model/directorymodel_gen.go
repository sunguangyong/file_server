// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	directoryFieldNames          = builder.RawFieldNames(&Directory{})
	directoryRows                = strings.Join(directoryFieldNames, ",")
	directoryRowsExpectAutoSet   = strings.Join(stringx.Remove(directoryFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	directoryRowsWithPlaceHolder = strings.Join(stringx.Remove(directoryFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	directoryModel interface {
		Insert(ctx context.Context, data *Directory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Directory, error)
		Update(ctx context.Context, data *Directory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDirectoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Directory struct {
		Id         int64     `db:"id"`
		Uid        int64     `db:"uid"`         // user id
		Name       string    `db:"name"`        // 路径名称
		Prefix     int64     `db:"prefix"`      // 上级目录Id
		Fid        int64     `db:"fid"`         // 关联的文件表主键ID： 如果为0表示目录本身
		Level      int64     `db:"level"`       // 目录层级
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newDirectoryModel(conn sqlx.SqlConn) *defaultDirectoryModel {
	return &defaultDirectoryModel{
		conn:  conn,
		table: "`directory`",
	}
}

func (m *defaultDirectoryModel) Insert(ctx context.Context, data *Directory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, directoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Prefix, data.Fid, data.Level)
	return ret, err
}

func (m *defaultDirectoryModel) FindOne(ctx context.Context, id int64) (*Directory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", directoryRows, m.table)
	var resp Directory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDirectoryModel) Update(ctx context.Context, data *Directory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, directoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.Name, data.Prefix, data.Fid, data.Level, data.Id)
	return err
}

func (m *defaultDirectoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDirectoryModel) tableName() string {
	return m.table
}
