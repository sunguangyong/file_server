// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	filePathFieldNames          = builder.RawFieldNames(&FilePath{})
	filePathRows                = strings.Join(filePathFieldNames, ",")
	filePathRowsExpectAutoSet   = strings.Join(stringx.Remove(filePathFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	filePathRowsWithPlaceHolder = strings.Join(stringx.Remove(filePathFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	filePathModel interface {
		Insert(ctx context.Context, data *FilePath) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*FilePath, error)
		Update(ctx context.Context, data *FilePath) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFilePathModel struct {
		conn  sqlx.SqlConn
		table string
	}

	FilePath struct {
		Id         int64     `db:"id"`          // 主键ID
		PathName   string    `db:"path_name"`   // 路径名称
		UpPathId   int64     `db:"up_path_id"`  // 上行路径id
		FileId     int64     `db:"file_id"`     // 文件id
		UserId     int64     `db:"user_id"`     // 用户id
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 修改时间
	}
)

func newFilePathModel(conn sqlx.SqlConn) *defaultFilePathModel {
	return &defaultFilePathModel{
		conn:  conn,
		table: "`file_path`",
	}
}

func (m *defaultFilePathModel) Insert(ctx context.Context, data *FilePath) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, filePathRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PathName, data.UpPathId, data.FileId, data.UserId)
	return ret, err
}

func (m *defaultFilePathModel) FindOne(ctx context.Context, id int64) (*FilePath, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", filePathRows, m.table)
	var resp FilePath
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFilePathModel) Update(ctx context.Context, data *FilePath) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, filePathRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.PathName, data.UpPathId, data.FileId, data.UserId, data.Id)
	return err
}

func (m *defaultFilePathModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFilePathModel) tableName() string {
	return m.table
}
